name: $(Date:yyyyMMdd)$(Rev:.r)
trigger: none
pr: none
schedules:
- cron: "0 0 * * *"
  displayName: Daily midnight build
  branches:
    include:
    - master

parameters:
- name: pools
  type: object
  default: [ "ubuntu-20.04", "ubuntu-22.04", "windows-2022", "macos-12" ]
- name: test_pools
  type: object
  default: [ "ubuntu-20.04", "ubuntu-22.04" ]

stages:
- stage: Build
  jobs:
  - ${{ each pool in parameters.pools }}:
    - job:
      displayName: Build angr-management on ${{ pool }}
      pool:
        vmImage: ${{ pool }}
      steps:
        - task: UsePythonVersion@0
          inputs:
            versionSpec: 3.10
        - ${{ if contains(pool, 'windows') }}:
          - task: BatchScript@1
            displayName: Call vcvars64.bat
            inputs:
              filename: C:\Program Files\Microsoft Visual Studio\2022\Enterprise\VC\Auxiliary\Build\vcvars64.bat
              modifyEnvironment: true
        - ${{ if contains(pool, 'ubuntu') }}:
          - task: Bash@3
            displayName: Install build dependencies
            inputs:
              targetType: inline
              script: sudo apt-get update; sudo apt-get install -y libfuse2 libegl1 libxkbcommon-x11-0 libxcb-icccm4 libxcb-image0 libxcb-keysyms1 libxcb-randr0 libxcb-render-util0 libxcb-shape0
        - task: Bash@3
          displayName: Run build.sh
          inputs:
            targetType: 'filePath'
            filePath: .azure-pipelines/build.sh
        - task: PublishPipelineArtifact@1
          inputs:
            targetPath: upload
            artifactName: angr-management-${{ pool }}

- stage: Test
  jobs:
  - ${{ each pool in parameters.test_pools }}:
    - job:
      displayName: Test linux pyinstaller build launches on Ubuntu ${{ pool }}
      pool:
        vmImage: ${{ pool }}
      steps:
      - bash: sudo apt-get install -y xvfb x11-utils
        displayName: Install X11 app testing utilities
      - task: DownloadPipelineArtifact@2
        inputs:
          artifactName: angr-management-${{ pool }}
      - bash: sudo apt-get install -y libegl1
      - bash: |
          set -x
          . /etc/os-release
          export binary="../angr-management-onefile-$ID-$VERSION_ID"
          export QT_DEBUG_PLUGINS=1
          chmod +x $binary
          xvfb-run bash -x -c '
            $binary &
            sleep 30 && output=$(xwininfo -tree -root)
            [[ "$output" == *"angr management"* ]] || exit 1
          '

- stage: Deploy
  dependsOn: Test
  condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/master'))
  jobs:
  - job: Release
    pool:
      vmImage: ubuntu-18.04
    variables:
    - name: old_release
      value: ''
    steps:
    # Needed for the oldest_release script
    - task: UsePythonVersion@0
      inputs:
        versionSpec: 3.6
    - bash: pip install pygithub

    # Download artifacts and create release
    - task: DownloadPipelineArtifact@2
      inputs:
        path: $(Build.SourcesDirectory)/dist/
    - task: GitHubRelease@0
      displayName: Create Github Release
      inputs:
        gitHubConnection: angr-management
        repositoryName: $(Build.Repository.Name)
        target: $(Build.SourceVersion)
        tagSource: manual
        tag: nightly-$(Build.BuildNumber)
        title: angr-management nightly preview $(Build.BuildNumber)
        releaseNotesSource: input
        releaseNotes: >
          This release is an automatically generated pre-release. We do our best
          to make sure everything works, but please be advised that features may
          break or change without notice.
        isPreRelease: true
        addChangelog: true
        compareWith: 'lastRelease'
        assets: dist/*/*

    # Delete oldest nightly release
    - task: PythonScript@0
      inputs:
        scriptPath: $(Build.SourcesDirectory)/.azure-pipelines/get_oldest_nightly.py
        arguments: $(Build.Repository.Name)
    - task: GitHubRelease@0
      displayName: Delete old nightlies
      condition: |
        and(
          ne(variables['old_release'], ''),
          startsWith(variables['old_release'], 'nightly-'),
          not(endsWith(variables['old_release'], variables['Build.BuildNumber']))
          )
      inputs:
        gitHubConnection: angr-management
        action: delete
        repositoryName: $(Build.Repository.Name)
        target: $(Build.SourceVersion)
        tagSource: manual
        tag: $(old_release)
