name: Pyinstaller build

on:
  workflow_call:

jobs:
  build:
    strategy:
      matrix:
        os:
          - ubuntu-20.04
          - ubuntu-22.04
          - windows-2022
          - macos-12
          - macos-14
      fail-fast: false
    name: Build on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-python@v4
        with:
          python-version: "3.12"
      - run: |
          sudo apt-get update;
          sudo apt-get install -y \
            libfuse2 \
            libegl1 \
            libxkbcommon-x11-0 \
            libxcb-cursor0 \
            libxcb-icccm4 \
            libxcb-image0 \
            libxcb-keysyms1 \
            libxcb-randr0 \
            libxcb-render-util0 \
            libxcb-shape0
        if: startsWith(matrix.os, 'ubuntu')
      - run: |
          call "C:\Program Files\Microsoft Visual Studio\2022\Enterprise\VC\Auxiliary\Build\vcvars64.bat"
          bash .github\workflows\nightly-build.sh
        shell: cmd
        if: startsWith(matrix.os, 'windows')
      - run: bash .github/workflows/nightly-build.sh
        if: startsWith(matrix.os, 'ubuntu') || startsWith(matrix.os, 'macos')
      - uses: actions/upload-artifact@v4
        with:
          name: angr-management-${{ matrix.os }}
          path: |
            upload/*.tar.gz
            upload/*.zip
          compression-level: 0

  test_ubuntu:
    strategy:
      matrix:
        os:
          - ubuntu-20.04
          - ubuntu-22.04
      fail-fast: false
    name: Test on ${{ matrix.os }}
    needs: build
    runs-on: ${{ matrix.os }}
    steps:
      - run: sudo apt-get update && sudo apt-get install -y xvfb x11-utils libegl1
        name: Install X11 app testing utilities
      - uses: actions/download-artifact@v4
        with:
          name: angr-management-${{ matrix.os }}
      - run: |
          set -x
          . /etc/os-release

          tar -xzf angr-management-ubuntu-$VERSION_ID.tar.gz
          export binary="./angr-management/angr-management"
          export QT_DEBUG_PLUGINS=1
          chmod +x $binary
          xvfb-run bash -x -c '
            $binary &
            sleep 30 && output=$(xwininfo -tree -root)
            [[ "$output" == *"angr management"* ]] || exit 1
          '

  test_windows:
    strategy:
      matrix:
        os:
          - windows-2022
      fail-fast: false
    name: Test on ${{ matrix.os }}
    needs: build
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/download-artifact@v4
        with:
          name: angr-management-${{ matrix.os }}
      - run: |
          7z x angr-management-win64.zip
          .\angr-management\angr-management.exe
          sleep 30
          [array]$am_windows = Get-Process |
            Where-Object {$_.MainWindowTitle -ne ""} |
            Select-Object MainWindowTitle |
            where {$_ -match 'angr management'}
          if ($am_windows.Length -ne 1) {
            echo "Number of open angr management windows" $am_windows.Length
            exit 1
          }

  test_macos:
    strategy:
      matrix:
        os:
          - macos-12
          - macos-14
      fail-fast: false
    name: Test on ${{ matrix.os }}
    needs: build
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/download-artifact@v4
        with:
          name: angr-management-${{ matrix.os }}
      - run: |
          set -x
          unzip -o ./angr-management-macOS-$(uname -m).zip
          open *.app
          for i in {0..7}; do
            sleep 15
            windows=$(osascript -e '
              tell application "System Events" to get (name of every window of processes whose name contains "angr management") as string
            ')
            if [ "$windows" != "" ]; then
              exit 0
            fi
          done
          exit 1
